# Add acl utilities for ansible to manage unprivileged users properly.
- name: Add access control list utilities.
  apt:
    name: acl
    cache_valid_time: 7200
  become: true

- name: Create user groups
  group:
    name: "{{ item }}"
    state: present
  loop: "{{ ugroups }}"

  # This strategy is secure for a few privileged accounts, but
  # should be rethought if there will be many users.
- name: Allow 'sudo' group to have passwordless sudo
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: "^%sudo"
    line: "%sudo ALL=(ALL) NOPASSWD: ALL"
    validate: /usr/sbin/visudo -cf %s
  become: true

- name: Create app users.
  user:
    name: "{{ item.name }}"
    state: present
    group: "{{ item.ugroup | default(omit) }}"
    append: false
    create_home: true
    shell: /bin/bash
  loop: "{{ users|default([]) }}"
  when: item.ugroup is defined
  register: createusr
  become: true

- name: Create system users.
  user:
    name: "{{ item.name }}"
    state: present
    groups: "{{ item.ugroups | default(omit) }}"
    append: false
    create_home: true
    shell: /bin/bash
  loop: "{{ users|default([]) }}"
  when: item.ugroups is defined
  register: createusr
  become: true

- name: Copy privileged user's ssh pub keys to authorized_keys file.
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ item.ssh_key }}"
  loop: "{{ users }}"
  become: true
  when: item.ssh_key is defined

- name: Enable options in sshd_config
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: "(?i)^{{ item }}\\s+no"
    line: "{{ item }} yes"
  loop:
    - AllowTcpForwarding   # For remote GUI DB Mgr access

- name: Disable options in sshd_config
  lineinfile:
    path: /etc/ssh/sshd_config
    state: present
    regexp: "(?i)^{{ item }}\\s+yes"
    line: "{{ item }} no"
  loop:
    - PasswordAuthentication
    - PermitRootLogin

- name: Restart sshd service
  service:
    name: sshd.service
    state: restarted
  become: true
