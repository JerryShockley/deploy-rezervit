---
- hosts: all
  gather_facts: false
  become: true

  vars_files:
    - vars/vault.yml
    - vars/main.yml


  tasks:
    - name: Include vagrant variables.
      include_vars:
        file: vars/vagrant_vars.yml
      when: ansible_user == 'vagrant'

    - name: Include non-vagrant variables.
      include_vars:
        file: vars/nonvagrant_vars.yml
      when: ansible_user != 'vagrant'

    - name: Ensure Node.js app folder exists.
      ansible.builtin.file:
        path: "{{ node_app_location }}"
        state: directory

    - name: Check out app from Github.
      ansible.builtin.git:
        repo: "{{ git_repo }}"
        dest: "{{ node_app_location }}"
        accept_hostkey: true
        force: true
        version: HEAD
      register: app_updated

    - name: Create app config directory.
      ansible.builtin.file:
        path: "{{ node_app_location }}/config"
        state: directory
        mode: "0660"
        owner: "{{ app_user }}"
      become: true

    - name: Apply App DB config template.
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/config.js.j2"
        dest: "{{ node_app_location }}/config/config.js"
        owner: "{{ app_user }}"
        mode: "0660"
      become: true

    - name: Set owner and groups on app files.
      ansible.builtin.command:
        cmd: "chown -R {{ app_user }}:{{ app_usr_group }} {{ node_app_location }}"
      register: perm_set
      when: app_updated and ansible_user != 'vagrant'
      become: true

    - name: Set permissions on app files.
      ansible.builtin.command:
        cmd: "chmod -R 777 {{ node_app_location }}"
      register: perm_set
      when: app_updated and ansible_user != 'vagrant'
      become: true

    - name: Make entry point executable.
      ansible.builtin.file:
        path: "{{ node_app_location }}/bin/index.js"
        mode: '0770'
      when: ansible_user != 'vagrant'

    - name: Set system-wide NODE_ENV environment variable.
      ansible.builtin.lineinfile:
        path: /etc/environment
        regexp: NODE_ENV=(?!{{ node_env }})
        line: NODE_ENV={{ node_env }}
      become: true
      when: ansible_user != 'vagrant'

    - name: Add authbind config file.
      ansible.builtin.file:
        path: /etc/authbind/byport/80
        group: "{{ app_usr_group }}"
        owner: "{{ app_user }}"
        mode: '0755'
        state: touch
      when: ansible_user != 'vagrant'

    - name: Set environment variables and aliases for nonlogin users.
      ansible.builtin.lineinfile:
        path: /home/{{ app_user }}/.bashrc
        regexp: "{{ item.regex }}"
        line: "{{ item.rline }}"
      loop:
        - {
            regex: "NODE_ENV=(?!{{ node_env }})",
            rline: "NODE_ENV={{ node_env }}"
          }
      become: true
      when: ansible_user != 'vagrant'

    - name: Reset connection so NODE_ENV alias will be present.
      meta: reset_connection
      become: true
      when: ansible_user != 'vagrant'

    - name: Install app dependencies defined in package.json.
      ansible.builtin.command:
        cmd: npm install
        chdir: "{{ node_app_location }}"
      become: true
      become_user: "{{ app_user }}"

    - name: Reboot server to complete upgrades and validate restart script.
      ansible.builtin.shell:
        cmd: sudo reboot
        chdir: "{{ node_app_location }}"
      failed_when: false
      become: yes
      when: ansible_user != 'vagrant'

    - name: Reset connection.
      meta: reset_connection

    - name: Wait for server to complete reboot.
      wait_for_connection:
        delay: 30
      failed_when: false
